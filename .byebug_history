c
described_class.new(inventory_id: inventory.id, scan_report_id: scan_report.id).call
c
inventory.csv_file
inventory
file[0]
file.headers
file[0]
file
c
File.exists?('tmp/comparison.csv')
c
File.exists?('tmp/comparison.csv')
c
File.exists?('tmp/comparison.csv')
c
File.exists?('tmp/comparison.csv')
response.status
response
response.body
c
expect(response.status).to eq(201)
expect(ScanReport.count).to eq(1)
expect (response.status).to eq(201)
expect response.status.to eq(201)
response.status
c
expect(ScanReport.first.json_file.filename).to eq('json_file.json')
ScanReport.last.json_file.attached?
ScanReport.count
response.body
response.status_message
response.status
response.methods
response
c
scan_report_params
c
response
exit
@data
exit
data
exit
['LOCATION'].downcase
row['LOCATION'].downcase
row['LOCATION']
obj['name']
obj
c
data.first
data.class
data
exit
c
JSON.parse(obj)
obj
json_file
row['LOCATION']
row
obj['name']
obj
exit
c
n
c
n
c
n
json_file
exit
c
n
c
n
c
puts inventory.csv_file.blob.inspect
Rails.application.config.active_storage.analyzers
Rails.application.config.active_storage
Rails.application.config
Rails.application
file_path = ActiveStorage::Blob
file_path = ActiveStorage
file_path = ActiveStorage::Blob
Rails.application.config_for(:storage)
file_path = ActiveStorage::Blob.service.send(:path_for, inventory.csv_file.key)
JSON.parse(scan_report.json_file.download)
inventory_csv = CSV.read(inventory.csv_file.download)
c
data = CSV.read(content)
data = CSV.parse(content, headers: true)
content = inventory.csv_file
data = CSV.parse(content, headers: true)
data = VSC.parse(content, headers: true)
content = inventory.csv_file.download
inventory.csv_file.download
CSV.read(inventory.csv_file.download)
CSV.read(inventory.csv_file.download
c
list_params
c
list_params
c
params
list_params
c
scan_report_params
c
scan_report_params
c
scan_report_params
c
scan_report_params
